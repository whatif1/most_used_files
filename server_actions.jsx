"use server"
import {revalidatePath} from "next/cache";
import {headers} from "next/headers";
import {auth} from "../../auth";


export async function signUp(email, password, name) {
    try {
        console.log('Starting registration for:', email);

        const result = await auth.api.signUpEmail({
            body: {
                email,
                password,
                name
            },
            headers: await headers() // –í–∞–∂–Ω–æ –¥–ª—è cookies
        });

        console.log('Registration result:', result);

        // Email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ sendOnSignUp: true
        if (result.user) {
            return {
                success: true,
                requiresVerification: !result.user.emailVerified,
                message: "Registration successful! Check your email for verification.",
                data: result
            };
        }

        return {success: false, message: "Registration failed"};
    } catch (error) {
        console.error('Registration error:', error);
        return {
            success: false,
            message: error.message || "Registration failed"
        };
    }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
export async function resendVerificationEmail(email) {
    try {
        console.log('üìÆ Resending verification email to:', email);

        // Better Auth API –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        const result = await auth.api.sendVerificationEmail({
            body: {email},
            headers: await headers()
        });

        return {
            success: true,
            message: "Verification email sent successfully"
        };
    } catch (error) {
        console.error('Resend email error:', error);
        return {
            success: false,
            message: error.message || "Failed to send email"
        };
    }
}


export async function signIn(email, password) {
    try {
        let result = await auth.api.signInEmail({
            body: {email, password}
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø—Ä–∏ –≤—Ö–æ–¥–µ
        if (result.user && !result.user.emailVerified) {
            return {
                success: false,
                requiresVerification: true,
                message: "Please verify your email before signing in"
            };
        }

        return {success: true, data: result};
    } catch (error) {
        return {success: false, message: error.message};
    }
}


export async function signOut() {
    let result = await auth.api.signOut({headers: await headers()});
    return result;
}


export async function getUnprotectedData() {
    let mainUrl = process.env.NEXT_PUBLIC_API_URL;
    try {
        let response = await fetch(`${mainUrl}/main_api_app/get_all_recipies`,
            {cache: "no-cache"});
        if (!response.ok) {
            if (response.status === 404) {
                return false;
            }
            throw new Error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
        }
        let result = await response.json();
        return result;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
        return false;
    }
}


export async function createUnprotectedFormData(data) {
    let apiURL = process.env.NEXT_PUBLIC_API_URL;
    const formData = new FormData();
    formData.append('instructions', data.instructions);
    // `data.image` - —ç—Ç–æ –æ–±—ä–µ–∫—Ç File, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ InputFileUpload
    if (data.image) {
        formData.append('image', data.image);
    }
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        const response = await fetch(`${apiURL}/main_api_app/add_recipe`, {
            method: 'POST',
            body: formData,
            // –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Content-Type'. –ë—Ä–∞—É–∑–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º boundary –¥–ª—è multipart/form-data.
        });
        if (!response.ok) {
            const errorData = await response.json();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            return {success: false, message: errorData.detail || `Server error: ${response.status}`};
        }
        revalidatePath('/meals', 'layout');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {success: true, message: 'Recipe created successfully!'};
    } catch (error) {
        console.error('Error submitting form:', error);
        return {success: false, message: 'Failed to connect to the server.'};
    }
}


export async function createUnprotectedJsonData(data) {
    let apiURL = process.env.NEXT_PUBLIC_API_URL;
    try {
        const response = await fetch(`${apiURL}/main_api_app/create_message`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(data),
        });
        if (!response.ok) {
            const errorData = await response.json();
            return {success: false, message: errorData.detail || `Server error: ${response.status}`};
        }
        revalidatePath('/messages', 'layout');
        return {success: true, message: 'Recipe created successfully!'};
    } catch (error) {
        console.error('Error submitting form:', error);
        return {success: false, message: 'Failed to connect to the server.'};
    }
}


export async function getProtectedDataTemplate() {
    let mainUrl = process.env.NEXT_PUBLIC_API_URL;

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É cookie –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const cookieStore = await cookies();
    const sessionTokenCookie = cookieStore.get('better-auth.session_token');

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
    if (!sessionTokenCookie) {
        console.error("Server Action: Cookie 'better-auth.session_token' not found.");
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        return false;
    }

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestHeaders = new Headers();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Cookie', –∫–æ—Ç–æ—Ä—ã–π –∏ –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω FastAPI
    requestHeaders.set('Cookie', `better-auth.session_token=${sessionTokenCookie.value}`);

    try {
        let response = await fetch(`${mainUrl}/main_api_app/dashboard`,
            {cache: "no-cache", headers: requestHeaders});
        if (!response.ok) {
            if (response.status === 404) {
                return false;
            }
            throw new Error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
        }
        let result = await response.json();
        return result;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
        return false;
    }
}
